/*
 * Swagger Odissey - OpenAPI 3.0
 *
 * This is simple api for working with currency rate and mails from smtp server
 *
 * API version: 1.0.11
 * Contact: okint34@yandex.ru
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"context"
	"log"
	"net/http"
	"odyssey/m/v2/internal/app"
	"odyssey/m/v2/internal/router"
	"odyssey/m/v2/internal/token"
	"os"
	"os/signal"
	"time"

	"github.com/dgrijalva/jwt-go"
)

func main() {
	var wait time.Duration = time.Second * 15
	log.Printf("Server started")

	app := app.NewApplication()

	privKeyFile := "rsa_private_dev.pem"
	priv, err := os.ReadFile(privKeyFile)

	if err != nil {
		log.Fatalf("could not read private key pem file: %w", err)
	}

	privKey, err := jwt.ParseRSAPrivateKeyFromPEM(priv)

	if err != nil {
		log.Fatalf("could not parse private key: %w", err)
	}

	pubKeyFile := "rsa_public_dev.pem"
	pub, err := os.ReadFile(pubKeyFile)

	if err != nil {
		log.Fatalf("could not read public key pem file: %w", err)
	}

	pubKey, err := jwt.ParseRSAPublicKeyFromPEM(pub)
	if err != nil {
		log.Fatalf("could not parse public key: %w", err)
	}

	tokenService := token.NewTokenService(&token.TSConfig{
		PrivateKey: privKey,
		PublicKey:  pubKey,
	})

	app.SetTokenService(tokenService)

	router.NewRouter(app)

	srv := &http.Server{
		Addr:         "0.0.0.0:8080",
		WriteTimeout: time.Second * 15,
		ReadTimeout:  time.Second * 15,
		IdleTimeout:  time.Second * 60,
		Handler:      app.GetRouter(),
	}
	go func() {
		if err := srv.ListenAndServe(); err != nil {
			log.Println(err)
		}
	}()

	c := make(chan os.Signal, 1)

	signal.Notify(c, os.Interrupt)
	<-c
	ctx, cancel := context.WithTimeout(context.Background(), wait)
	defer cancel()

	srv.Shutdown(ctx)
	log.Println("Server shutdown")
	os.Exit(0)
}
